#!/usr/bin/env python3
"""
SCRIPT DE DIAGN√ìSTICO PARA AGENTE XWIKI MCP
===========================================
Este script est√° dise√±ado para ser una herramienta de autodiagn√≥stico que verifica
si el entorno de ejecuci√≥n est√° correctamente configurado antes de intentar
lanzar el agente principal. Realiza una serie de comprobaciones, desde la versi√≥n
de Python hasta la validez de los archivos de configuraci√≥n y la conectividad.

EJECUCI√ìN:
Desde la terminal, en el directorio 'xwiki_agent', ejecuta:
python diagnosis_script.py
"""

import sys
import os
import subprocess
from pathlib import Path
import importlib.util

# --- Funciones de Utilidad para la Interfaz ---

def print_header(title: str):
    """Imprime un encabezado visualmente distintivo para separar las secciones del diagn√≥stico."""
    print(f"\n{'='*60}")
    print(f"üîç {title}")
    print('='*60)

def print_status(item: str, status: bool, details: str = ""):
    """Formatea y muestra el resultado de una comprobaci√≥n espec√≠fica.

    Args:
        item (str): La descripci√≥n de la comprobaci√≥n.
        status (bool): True si la comprobaci√≥n fue exitosa, False en caso contrario.
        details (str, optional): Informaci√≥n adicional sobre el resultado.
    """
    icon = "‚úÖ" if status else "‚ùå"
    print(f"{icon} {item}")
    if details:
        # Imprime detalles con sangr√≠a para facilitar la lectura.
        print(f"   ‚îî‚îÄ {details}")

# --- Funciones de Verificaci√≥n ---

def check_python_version():
    """Verifica que la versi√≥n de Python instalada sea compatible (3.8 o superior)."""
    print_header("VERIFICACI√ìN DE VERSI√ìN DE PYTHON")
    
    # Obtiene la informaci√≥n de la versi√≥n actual del int√©rprete.
    version = sys.version_info
    print(f"üêç Versi√≥n de Python detectada: {version.major}.{version.minor}.{version.micro}")
    
    # Comprueba si la versi√≥n es igual o superior a 3.8.
    if version.major >= 3 and version.minor >= 8:
        print_status("Versi√≥n de Python", True, f"La versi√≥n {version.major}.{version.minor} es compatible.")
        return True
    else:
        print_status("Versi√≥n de Python", False, f"Se requiere Python 3.8 o superior, pero se encontr√≥ {version.major}.{version.minor}.")
        return False

def check_dependencies():
    """Asegura que todas las bibliotecas de Python requeridas est√©n instaladas."""
    print_header("VERIFICACI√ìN DE DEPENDENCIAS")
    
    # Diccionario de m√≥dulos a verificar y el nombre del paquete para la instalaci√≥n.
    dependencies = {
        "google.adk.agents": "google-adk",
        "mcp": "mcp", 
        "requests": "requests",
        "dotenv": "python-dotenv",
    }
    
    all_ok = True
    
    # Itera sobre cada dependencia requerida.
    for module_name, package_name in dependencies.items():
        try:
            # Intenta importar el m√≥dulo din√°micamente.
            importlib.import_module(module_name)
            print_status(f"Paquete '{package_name}'", True, f"El m√≥dulo '{module_name}' se import√≥ correctamente.")
        except ImportError:
            # Si la importaci√≥n falla, el paquete no est√° instalado.
            print_status(f"Paquete '{package_name}'", False, f"No se encontr√≥. Inst√°lalo con: pip install {package_name}")
            all_ok = False
    
    return all_ok

def check_files():
    """Verifica la existencia de los archivos clave del proyecto."""
    print_header("VERIFICACI√ìN DE ARCHIVOS DEL PROYECTO")
    
    # Obtiene la ruta del directorio donde se encuentra este script.
    current_dir = Path(__file__).parent
    
    # Define los archivos que son cruciales para el funcionamiento.
    required_files = {
        "server.py": "(REQUERIDO) Contiene la l√≥gica del servidor MCP y las herramientas de XWiki.",
        "agent.py": "(REQUERIDO) Define y configura el agente de IA.",
    }
    
    # Define archivos que son √∫tiles pero no estrictamente necesarios.
    optional_files = {
        ".env": "(RECOMENDADO) Para almacenar variables de entorno como claves de API.",
    }
    
    all_required_ok = True
    
    # Comprueba la existencia de cada archivo requerido.
    for filename, description in required_files.items():
        filepath = current_dir / filename
        exists = filepath.exists()
        print_status(f"Archivo '{filename}'", exists, description)
        if not exists:
            all_required_ok = False
    
    # Comprueba la existencia de archivos opcionales.
    for filename, description in optional_files.items():
        filepath = current_dir / filename
        exists = filepath.exists()
        print_status(f"Archivo '{filename}'", exists, description)
    
    return all_required_ok

def check_server_syntax():
    """Analiza 'server.py' para detectar errores de sintaxis y elementos faltantes."""
    print_header("VERIFICACI√ìN DE SINTAXIS Y CONTENIDO DE SERVER.PY")
    
    server_path = Path(__file__).parent / "server.py"
    
    if not server_path.exists():
        print_status("An√°lisis de 'server.py'", False, "El archivo no existe.")
        return False
    
    try:
        # Lee el contenido del archivo del servidor.
        with open(server_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Intenta compilar el c√≥digo para validar la sintaxis de Python.
        compile(content, str(server_path), 'exec')
        print_status("Sintaxis de 'server.py'", True, "El archivo tiene una sintaxis de Python v√°lida.")
        
        # Lista de funciones y variables cr√≠ticas que deben estar definidas en el servidor.
        required_elements = [
            "list_spaces", "get_page", "create_or_update_page",
            "search_pages", "list_pages", "XWIKI_URL", "run_mcp_stdio_server"
        ]
        
        missing_elements = [elem for elem in required_elements if elem not in content]
        
        if missing_elements:
            print_status("Elementos requeridos en 'server.py'", False, f"Faltan las siguientes definiciones: {', '.join(missing_elements)}")
            return False
        else:
            print_status("Elementos requeridos en 'server.py'", True, "Todas las funciones y variables necesarias est√°n presentes.")
            return True
            
    except SyntaxError as e:
        print_status("Sintaxis de 'server.py'", False, f"Error de sintaxis detectado: {e}")
        return False
    except Exception as e:
        print_status("An√°lisis de 'server.py'", False, f"Ocurri√≥ un error inesperado al leer el archivo: {e}")
        return False

def check_api_keys():
    """Verifica que la clave de API de Google est√© configurada y sea v√°lida."""
    print_header("VERIFICACI√ìN DE CLAVE DE API DE GOOGLE")
    
    try:
        from dotenv import load_dotenv
        load_dotenv() # Carga el archivo .env si existe.
    except ImportError:
        pass # Si python-dotenv no est√°, se omite.
    
    google_api_key = os.getenv("GOOGLE_API_KEY")
    
    if google_api_key:
        # Una clave v√°lida de Google AI empieza con 'AIza' y tiene una longitud considerable.
        if len(google_api_key) > 30 and google_api_key.startswith("AIza"):
            masked_key = f"{google_api_key[:8]}...{google_api_key[-4:]}" # Ofusca la clave por seguridad.
            print_status("Clave de API de Google (GOOGLE_API_KEY)", True, f"Encontrada en variable de entorno: {masked_key}")
            return True
        else:
            print_status("Clave de API de Google (GOOGLE_API_KEY)", False, "La clave encontrada en la variable de entorno parece inv√°lida o es un placeholder.")
            return False
    else:
        print_status("Clave de API de Google (GOOGLE_API_KEY)", False, "No se encontr√≥ en las variables de entorno. Aseg√∫rate de crear un archivo .env con esta variable.")
        return False

def check_xwiki_config():
    """Verifica que las credenciales de XWiki est√©n configuradas en 'server.py'."""
    print_header("VERIFICACI√ìN DE CONFIGURACI√ìN DE XWIKI")
    
    server_path = Path(__file__).parent / "server.py"
    
    if not server_path.exists():
        print_status("Configuraci√≥n de XWiki", False, "El archivo 'server.py' no fue encontrado.")
        return False
    
    try:
        with open(server_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Credenciales a buscar dentro del archivo.
        configs_to_check = {
            'XWIKI_URL': 'URL del servidor XWiki',
            'XWIKI_USER': 'Usuario para la API de XWiki',
            'XWIKI_PASS': 'Contrase√±a para la API de XWiki',
        }
        
        all_configs_ok = True
        
        for config_name, description in configs_to_check.items():
            # Busca la l√≠nea donde se define la variable.
            if config_name in content:
                lines = content.split('\n')
                found_line = False
                for line in lines:
                    if line.strip().startswith(f'{config_name} ='):
                        found_line = True
                        # Extrae el valor de la variable.
                        value = line.split('=', 1)[1].strip().strip('"\'')
                        # Comprueba si el valor es un placeholder o est√° vac√≠o.
                        if value and 'your_' not in value.lower() and 'change_me' not in value.lower() and value != "":
                            print_status(f"Variable '{config_name}'", True, f"{description} parece estar configurada.")
                        else:
                            print_status(f"Variable '{config_name}'", False, f"{description} parece ser un placeholder o est√° vac√≠a. Debes cambiarla en 'server.py'.")
                            all_configs_ok = False
                        break
                if not found_line:
                    print_status(f"Variable '{config_name}'", False, f"La definici√≥n de '{description}' no se encontr√≥ en el formato esperado.")
                    all_configs_ok = False
            else:
                print_status(f"Variable '{config_name}'", False, f"La definici√≥n de '{description}' no existe en 'server.py'.")
                all_configs_ok = False
        
        return all_configs_ok
        
    except Exception as e:
        print_status("An√°lisis de configuraci√≥n de XWiki", False, f"Ocurri√≥ un error inesperado: {e}")
        return False

# --- Reporte y Ejecuci√≥n Principal ---

def generate_report(results: dict):
    """Genera un resumen final con los resultados de todas las verificaciones."""
    print_header("REPORTE FINAL DE DIAGN√ìSTICO")
    
    total_checks = len(results)
    passed_checks = sum(1 for result in results.values() if result)
    
    print(f"üìä Total de verificaciones: {passed_checks} de {total_checks} pasaron exitosamente.")
    
    if passed_checks == total_checks:
        print("\nüéâ ¬°Excelente! Parece que todo est√° configurado correctamente.")
        print("‚úÖ Ahora puedes intentar ejecutar el agente principal con: python agent.py")
    else:
        print(f"\n‚ö†Ô∏è Se encontraron {total_checks - passed_checks} problemas de configuraci√≥n.")
        print("‚ùå Por favor, revisa los errores marcados con '‚ùå' en el reporte de arriba antes de continuar.")
        
        print("\nüîß PR√ìXIMOS PASOS SUGERIDOS:")
        # Proporciona una gu√≠a basada en las comprobaciones que fallaron.
        if not results.get('dependencies', True):
            print("  1. Instala las dependencias de Python faltantes con 'pip install'.")
        if not results.get('files', True):
            print("  2. Aseg√∫rate de que los archivos 'server.py' y 'agent.py' est√©n en el mismo directorio que este script.")
        if not results.get('api_keys', True):
            print("  3. Configura tu clave de API de Google en un archivo .env.")
        if not results.get('xwiki_config', True):
            print("  4. Revisa y corrige las credenciales de XWiki en el archivo 'server.py'.")
        if not results.get('server_syntax', True):
            print("  5. Corrige los errores de sintaxis o las definiciones faltantes en 'server.py'.")

def main():
    """Funci√≥n principal que orquesta la ejecuci√≥n de todas las verificaciones."""
    print("üöÄ INICIANDO DIAGN√ìSTICO DEL AGENTE XWIKI MCP üöÄ")
    print("Este script verificar√° que todos los componentes est√©n listos para la ejecuci√≥n.")
    
    # Diccionario para almacenar los resultados (True/False) de cada comprobaci√≥n.
    results = {
        'python_version': check_python_version(),
        'dependencies': check_dependencies(),
        'files': check_files(),
        'api_keys': check_api_keys(),
        'server_syntax': check_server_syntax(),
        'xwiki_config': check_xwiki_config(),
    }
    
    # Genera el reporte final basado en los resultados.
    generate_report(results)

# Punto de entrada del script: si se ejecuta directamente, llama a la funci√≥n main.
if __name__ == "__main__":
    main()
